import { TModel } from "@domain.js/main/dist/deps/rest/defines";
import { ErrorFn } from "@domain.js/main/dist/errors";
import { Model } from "sequelize/types";
import { deps } from "../../deps";
declare type Deps = Pick<typeof deps, "errors">;
export declare function Main(cnf: any, deps: Deps): (Model: TModel, id: string | number, opt: {
    raw?: boolean;
    type?: string;
    offset?: number;
    include?: import("sequelize/types").Includeable | import("sequelize/types").Includeable[];
    order?: import("sequelize/types").Order;
    attributes?: import("sequelize/types").FindAttributeOptions;
    group?: import("sequelize/types").GroupOption;
    limit?: number;
    lock?: boolean | import("sequelize/types").LOCK | {
        level: import("sequelize/types").LOCK;
        of: import("sequelize/types").ModelStatic<Model<any, any>>;
    };
    skipLocked?: boolean;
    having?: import("sequelize/types").WhereOptions<any>;
    subQuery?: boolean;
    nest?: boolean;
    plain?: boolean;
    replacements?: import("sequelize/types").BindOrReplacements;
    bind?: import("sequelize/types").BindOrReplacements;
    instance?: Model<any, any>;
    mapToModel?: boolean;
    retry?: import("sequelize/types").RetryOptions;
    fieldMap?: import("sequelize/types").FieldMap;
    transaction?: import("sequelize/types").Transaction;
    logging?: boolean | ((sql: string, timing?: number) => void);
    benchmark?: boolean;
    useMaster?: boolean;
    paranoid?: boolean;
    indexHints?: import("sequelize/types").IndexHint[];
}, error: ErrorFn) => Promise<Model<any, any>>;
export declare const Deps: string[];
export {};
